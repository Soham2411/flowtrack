// frontend/src/utils/pdfUtils.js
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export const generateFinancialReport = async (transactions, summary, categories, dateRange = null) => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.width;
  const pageHeight = pdf.internal.pageSize.height;
  let yPosition = 20;

  // Helper function to add text with word wrap
  const addText = (text, x, y, maxWidth = pageWidth - 40, fontSize = 10) => {
    pdf.setFontSize(fontSize);
    const lines = pdf.splitTextToSize(text, maxWidth);
    pdf.text(lines, x, y);
    return y + (lines.length * fontSize * 0.5);
  };

  // Header
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.text('FlowTrack Financial Report', 20, yPosition);
  yPosition += 15;

  // Date range
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  const dateText = dateRange 
    ? `Report Period: ${new Date(dateRange.start).toLocaleDateString()} - ${new Date(dateRange.end).toLocaleDateString()}`
    : 'Report Period: All Time';
  yPosition = addText(dateText, 20, yPosition, pageWidth - 40, 12);
  yPosition += 10;

  // Generated date
  yPosition = addText(`Generated: ${new Date().toLocaleString()}`, 20, yPosition, pageWidth - 40, 10);
  yPosition += 15;

  // Financial Summary
  pdf.setFontSize(16);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Financial Summary', 20, yPosition);
  yPosition += 10;

  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  yPosition = addText(`Total Income: $${summary.totalIncome.toFixed(2)}`, 20, yPosition);
  yPosition = addText(`Total Expenses: $${summary.totalExpenses.toFixed(2)}`, 20, yPosition);
  yPosition = addText(`Current Balance: $${summary.balance.toFixed(2)}`, 20, yPosition);
  yPosition = addText(`Total Transactions: ${summary.transactionCount}`, 20, yPosition);
  yPosition += 15;

  // Category Breakdown
  if (categories && categories.length > 0) {
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Categories', 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    
    categories.forEach(category => {
      const categoryTotal = transactions
        .filter(t => t.category_name === category.name)
        .reduce((sum, t) => sum + parseFloat(t.amount), 0);
      
      if (categoryTotal > 0) {
        yPosition = addText(`${category.name}: $${categoryTotal.toFixed(2)}`, 30, yPosition);
      }
    });
    yPosition += 15;
  }

  // Transaction Details (if space allows)
  if (yPosition < pageHeight - 100) {
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Recent Transactions', 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'normal');

    // Filter and sort transactions
    let filteredTransactions = transactions;
    if (dateRange) {
      filteredTransactions = transactions.filter(t => {
        const tDate = new Date(t.date);
        return tDate >= new Date(dateRange.start) && tDate <= new Date(dateRange.end);
      });
    }
    
    // Show last 10 transactions to fit on page
    const recentTransactions = filteredTransactions
      .sort((a, b) => new Date(b.date) - new Date(a.date))
      .slice(0, 10);

    recentTransactions.forEach(transaction => {
      const transactionText = `${new Date(transaction.date).toLocaleDateString()} - ${transaction.description} (${transaction.category_name}) - $${parseFloat(transaction.amount).toFixed(2)}`;
      yPosition = addText(transactionText, 20, yPosition, pageWidth - 40, 8);
      
      if (yPosition > pageHeight - 30) {
        return; // Stop if we're running out of space
      }
    });
  }

  // Footer
  pdf.setFontSize(8);
  pdf.setFont('helvetica', 'italic');
  pdf.text('Generated by FlowTrack - Smart Finance Manager', 20, pageHeight - 10);

  return pdf;
};

export const captureChartAsImage = async (chartElementId) => {
  const chartElement = document.getElementById(chartElementId);
  if (!chartElement) return null;

  try {
    const canvas = await html2canvas(chartElement, {
      backgroundColor: 'white',
      scale: 2, // Higher quality
      useCORS: true
    });
    return canvas.toDataURL('image/png');
  } catch (error) {
    console.error('Error capturing chart:', error);
    return null;
  }
};

export const generateReportWithCharts = async (transactions, summary, categories, dateRange = null) => {
  const pdf = await generateFinancialReport(transactions, summary, categories, dateRange);
  
  // Add new page for charts
  pdf.addPage();
  
  pdf.setFontSize(16);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Data Visualization', 20, 20);
  
  let yPos = 40;
  
  // Try to capture charts (you'll need to add IDs to your chart components)
  const chartIds = ['expense-pie-chart', 'income-expense-bar-chart', 'trend-line-chart'];
  
  for (const chartId of chartIds) {
    try {
      const chartImage = await captureChartAsImage(chartId);
      if (chartImage) {
        pdf.addImage(chartImage, 'PNG', 20, yPos, 170, 100);
        yPos += 110;
        
        if (yPos > 200) { // Start new page if needed
          pdf.addPage();
          yPos = 20;
        }
      }
    } catch (error) {
      console.log(`Could not capture chart ${chartId}:`, error);
    }
  }
  
  return pdf;
};